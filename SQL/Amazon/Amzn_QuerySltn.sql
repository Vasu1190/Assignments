-- Question 1. List all customers who have made purchases of more than $80.

SELECT U.Name, SUM(O.total_amount) AS Total_Spent
FROM Users U
JOIN Orders O ON U.user_id = O.user_id
GROUP BY U.Name
HAVING Total_Spent > 80; 

-- Question 2. Retrieve all orders placed in the last 280 days along with the customer name and email.

SELECT O.Order_id, O.Order_Date, U.name, U.Email
FROM Users U, Orders O
WHERE U.User_id = O.User_id
  AND O.Order_Date >= CURDATE() - INTERVAL 280 DAY;
  
-- Question 3. Find the average product price for each category.

SELECT Category, AVG(price) AS Avg_Price
FROM Products
GROUP BY Category;

-- Question 4. List all customers who have purchased a product from the category Electronics.

SELECT DISTINCT U.name
FROM Users U, Orders O, OrderDetails OD, Products P
WHERE U.user_id = O.user_id
  AND O.order_id = OD.order_id
  AND OD.product_id = P.product_id
  AND P.category = 'Electronics';
  
  -- Question 5. Find the total number of products sold and the total revenue generated for each product.

SELECT 
    P.Name AS Product_Name,
    SUM(OD.quantity) AS Total_Qt_Sold,
    SUM(OD.quantity * P.price) AS Total_Revenue
FROM 
    Products P, OrderDetails OD
WHERE 
    P.product_id = OD.product_id
GROUP BY 
    P.product_id;
    
-- Question 6. Update the price of all products in the Books category, increasing it by 10%.    

SET SQL_SAFE_UPDATES = 0;
ALTER TABLE Products
MODIFY price DECIMAL (10,2);
UPDATE Products
SET price = ROUND(price * 1.10,2)
WHERE category = 'Books';

SELECT P.Name, P.Category, price AS Original_Price, ROUND(price * 1.10, 2) AS Updated_Price
FROM Products P
WHERE category = 'Books';

-- Question 7. Remove all orders that were placed before 2020.

START TRANSACTION;

-- Original Version Before Deletion
SELECT *
FROM Orders
WHERE order_date < '2020-01-01';

-- Performing Deletion
DELETE FROM Orders
WHERE order_date < '2020-01-01';

-- Updated Version After Deletion
SELECT *
FROM Orders;

-- Commiting Changes
COMMIT; 

START TRANSACTION;
DELETE FROM Orders WHERE order_date < '2020-01-01';
ROLLBACK;   

-- Question 8. Write a query to fetch the order details, including customer name, product name, and quantity, for orders placed on 2024-11-01.

SELECT O.Order_Id, U.name AS Customer_Name, P.name AS Product_Name, OD.Quantity As Quantity_Purchased, O.order_date AS Ordered_Date
FROM Orders O
JOIN Users U ON O.user_id = U.user_id 
JOIN OrderDetails OD ON O.order_id = OD.order_id
JOIN Products P ON OD.product_id = P.product_id
WHERE order_date = '2024-5-01';

-- Question 9. Fetch all customers and the total number of orders they have placed.

SELECT U.name as Customer_Name, COUNT(O.Order_id) AS Total_Orders_Placed
FROM Users U
LEFT JOIN Orders O ON U.User_id = O.User_id
GROUP BY U.User_id;


-- Question 10. Retrieve the average rating for all products in the Electronics category.

-- Data insufficient to answer Since no coloumn named ratings is present in any of the tables created.

-- Question 11. List all customers who purchased more than 1 unit of any product, including the product name and total quantity purchased.

SELECT U.name as Customer_Name, P.name AS Product_Name, SUM(OD.quantity) AS Total_Quantity_Purchased
FROM Users U
JOIN Orders O ON U.User_id = O.User_id
JOIN OrderDetails OD ON O.Order_id = OD.Order_id
JOIN Products P ON OD.Product_id = P.Product_id
GROUP BY U.User_id, P.Product_id
HAVING Total_Quantity_Purchased > 1;

-- Question 12. Find the total revenue generated by each category along with the category name.

SELECT P.Category AS Category_Name, SUM(OD.Quantity * P.price) AS Total_Revenue
FROM Products P
JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
GROUP BY category;

 


